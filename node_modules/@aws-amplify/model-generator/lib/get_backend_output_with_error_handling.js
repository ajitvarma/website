import { BackendOutputClientError, BackendOutputClientErrorType, } from '@aws-amplify/deployed-backend-client';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Common Error handling for BackendOutputClient.getOutput() in model-generator package.
 */
export const getBackendOutputWithErrorHandling = async (backendOutputClient, backendIdentifier) => {
    try {
        return await backendOutputClient.getOutput(backendIdentifier);
    }
    catch (error) {
        if (BackendOutputClientError.isBackendOutputClientError(error) &&
            error.code === BackendOutputClientErrorType.DEPLOYMENT_IN_PROGRESS) {
            throw new AmplifyUserError('DeploymentInProgressError', {
                message: 'Deployment is currently in progress.',
                resolution: 'Re-run this command once the deployment completes.',
            }, error);
        }
        if (BackendOutputClientError.isBackendOutputClientError(error) &&
            error.code === BackendOutputClientErrorType.NO_STACK_FOUND) {
            throw new AmplifyUserError('StackDoesNotExistError', {
                message: 'Stack does not exist.',
                resolution: 'Ensure the CloudFormation stack ID or Amplify App ID and branch specified are correct and exists, then re-run this command.',
            }, error);
        }
        if (BackendOutputClientError.isBackendOutputClientError(error) &&
            error.code === BackendOutputClientErrorType.CREDENTIALS_ERROR) {
            throw new AmplifyUserError('CredentialsError', {
                message: 'Unable to get backend outputs due to invalid credentials.',
                resolution: 'Ensure your AWS credentials are correctly set and refreshed.',
            }, error);
        }
        if (BackendOutputClientError.isBackendOutputClientError(error) &&
            error.code === BackendOutputClientErrorType.ACCESS_DENIED) {
            throw new AmplifyUserError('AccessDeniedError', {
                message: 'Unable to get backend outputs due to insufficient permissions.',
                resolution: 'Ensure you have permissions to call cloudformation:GetTemplateSummary.',
            }, error);
        }
        throw error;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2JhY2tlbmRfb3V0cHV0X3dpdGhfZXJyb3JfaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0X2JhY2tlbmRfb3V0cHV0X3dpdGhfZXJyb3JfaGFuZGxpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHdCQUF3QixFQUN4Qiw0QkFBNEIsR0FFN0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHLEtBQUssRUFDcEQsbUJBQXdDLEVBQ3hDLGlCQUE0QyxFQUM1QyxFQUFFO0lBQ0YsSUFBSTtRQUNGLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUMvRDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsSUFDRSx3QkFBd0IsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUM7WUFDMUQsS0FBSyxDQUFDLElBQUksS0FBSyw0QkFBNEIsQ0FBQyxzQkFBc0IsRUFDbEU7WUFDQSxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLDJCQUEyQixFQUMzQjtnQkFDRSxPQUFPLEVBQUUsc0NBQXNDO2dCQUMvQyxVQUFVLEVBQUUsb0RBQW9EO2FBQ2pFLEVBQ0QsS0FBSyxDQUNOLENBQUM7U0FDSDtRQUNELElBQ0Usd0JBQXdCLENBQUMsMEJBQTBCLENBQUMsS0FBSyxDQUFDO1lBQzFELEtBQUssQ0FBQyxJQUFJLEtBQUssNEJBQTRCLENBQUMsY0FBYyxFQUMxRDtZQUNBLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsd0JBQXdCLEVBQ3hCO2dCQUNFLE9BQU8sRUFBRSx1QkFBdUI7Z0JBQ2hDLFVBQVUsRUFDUiw2SEFBNkg7YUFDaEksRUFDRCxLQUFLLENBQ04sQ0FBQztTQUNIO1FBQ0QsSUFDRSx3QkFBd0IsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUM7WUFDMUQsS0FBSyxDQUFDLElBQUksS0FBSyw0QkFBNEIsQ0FBQyxpQkFBaUIsRUFDN0Q7WUFDQSxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLGtCQUFrQixFQUNsQjtnQkFDRSxPQUFPLEVBQUUsMkRBQTJEO2dCQUNwRSxVQUFVLEVBQ1IsOERBQThEO2FBQ2pFLEVBQ0QsS0FBSyxDQUNOLENBQUM7U0FDSDtRQUNELElBQ0Usd0JBQXdCLENBQUMsMEJBQTBCLENBQUMsS0FBSyxDQUFDO1lBQzFELEtBQUssQ0FBQyxJQUFJLEtBQUssNEJBQTRCLENBQUMsYUFBYSxFQUN6RDtZQUNBLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsbUJBQW1CLEVBQ25CO2dCQUNFLE9BQU8sRUFDTCxnRUFBZ0U7Z0JBQ2xFLFVBQVUsRUFDUix3RUFBd0U7YUFDM0UsRUFDRCxLQUFLLENBQ04sQ0FBQztTQUNIO1FBRUQsTUFBTSxLQUFLLENBQUM7S0FDYjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXRDbGllbnQsXG4gIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvcixcbiAgQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZSxcbiAgRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogQ29tbW9uIEVycm9yIGhhbmRsaW5nIGZvciBCYWNrZW5kT3V0cHV0Q2xpZW50LmdldE91dHB1dCgpIGluIG1vZGVsLWdlbmVyYXRvciBwYWNrYWdlLlxuICovXG5leHBvcnQgY29uc3QgZ2V0QmFja2VuZE91dHB1dFdpdGhFcnJvckhhbmRsaW5nID0gYXN5bmMgKFxuICBiYWNrZW5kT3V0cHV0Q2xpZW50OiBCYWNrZW5kT3V0cHV0Q2xpZW50LFxuICBiYWNrZW5kSWRlbnRpZmllcjogRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllclxuKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGJhY2tlbmRPdXRwdXRDbGllbnQuZ2V0T3V0cHV0KGJhY2tlbmRJZGVudGlmaWVyKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoXG4gICAgICBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3IuaXNCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3IoZXJyb3IpICYmXG4gICAgICBlcnJvci5jb2RlID09PSBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3JUeXBlLkRFUExPWU1FTlRfSU5fUFJPR1JFU1NcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnRGVwbG95bWVudEluUHJvZ3Jlc3NFcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiAnRGVwbG95bWVudCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuJyxcbiAgICAgICAgICByZXNvbHV0aW9uOiAnUmUtcnVuIHRoaXMgY29tbWFuZCBvbmNlIHRoZSBkZXBsb3ltZW50IGNvbXBsZXRlcy4nLFxuICAgICAgICB9LFxuICAgICAgICBlcnJvclxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgQmFja2VuZE91dHB1dENsaWVudEVycm9yLmlzQmFja2VuZE91dHB1dENsaWVudEVycm9yKGVycm9yKSAmJlxuICAgICAgZXJyb3IuY29kZSA9PT0gQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZS5OT19TVEFDS19GT1VORFxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICdTdGFja0RvZXNOb3RFeGlzdEVycm9yJyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6ICdTdGFjayBkb2VzIG5vdCBleGlzdC4nLFxuICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAnRW5zdXJlIHRoZSBDbG91ZEZvcm1hdGlvbiBzdGFjayBJRCBvciBBbXBsaWZ5IEFwcCBJRCBhbmQgYnJhbmNoIHNwZWNpZmllZCBhcmUgY29ycmVjdCBhbmQgZXhpc3RzLCB0aGVuIHJlLXJ1biB0aGlzIGNvbW1hbmQuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvci5pc0JhY2tlbmRPdXRwdXRDbGllbnRFcnJvcihlcnJvcikgJiZcbiAgICAgIGVycm9yLmNvZGUgPT09IEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuQ1JFREVOVElBTFNfRVJST1JcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnQ3JlZGVudGlhbHNFcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiAnVW5hYmxlIHRvIGdldCBiYWNrZW5kIG91dHB1dHMgZHVlIHRvIGludmFsaWQgY3JlZGVudGlhbHMuJyxcbiAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgJ0Vuc3VyZSB5b3VyIEFXUyBjcmVkZW50aWFscyBhcmUgY29ycmVjdGx5IHNldCBhbmQgcmVmcmVzaGVkLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3IuaXNCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3IoZXJyb3IpICYmXG4gICAgICBlcnJvci5jb2RlID09PSBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3JUeXBlLkFDQ0VTU19ERU5JRURcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnQWNjZXNzRGVuaWVkRXJyb3InLFxuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICdVbmFibGUgdG8gZ2V0IGJhY2tlbmQgb3V0cHV0cyBkdWUgdG8gaW5zdWZmaWNpZW50IHBlcm1pc3Npb25zLicsXG4gICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICdFbnN1cmUgeW91IGhhdmUgcGVybWlzc2lvbnMgdG8gY2FsbCBjbG91ZGZvcm1hdGlvbjpHZXRUZW1wbGF0ZVN1bW1hcnkuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iXX0=